// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_organisation_access.sql

package db

import (
	"context"
)

const createUserOrganisationAccess = `-- name: CreateUserOrganisationAccess :one
INSERT INTO user_organisations_access (user_id, organisation_id)
VALUES ($1, $2) 
RETURNING user_id, organisation_id
`

type CreateUserOrganisationAccessParams struct {
	UserID         int64 `json:"user_id"`
	OrganisationID int64 `json:"organisation_id"`
}

func (q *Queries) CreateUserOrganisationAccess(ctx context.Context, arg CreateUserOrganisationAccessParams) (UserOrganisationsAccess, error) {
	row := q.db.QueryRowContext(ctx, createUserOrganisationAccess, arg.UserID, arg.OrganisationID)
	var i UserOrganisationsAccess
	err := row.Scan(&i.UserID, &i.OrganisationID)
	return i, err
}

const deleteUserOrganisationAccess = `-- name: DeleteUserOrganisationAccess :exec
DELETE FROM user_organisations_access
WHERE user_id = $1
AND organisation_id = $2
`

type DeleteUserOrganisationAccessParams struct {
	UserID         int64 `json:"user_id"`
	OrganisationID int64 `json:"organisation_id"`
}

func (q *Queries) DeleteUserOrganisationAccess(ctx context.Context, arg DeleteUserOrganisationAccessParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserOrganisationAccess, arg.UserID, arg.OrganisationID)
	return err
}

const getUserOrganisationAccess = `-- name: GetUserOrganisationAccess :one
SELECT user_id, organisation_id FROM user_organisations_access
WHERE user_id = $1 
AND organisation_id = $2
`

type GetUserOrganisationAccessParams struct {
	UserID         int64 `json:"user_id"`
	OrganisationID int64 `json:"organisation_id"`
}

func (q *Queries) GetUserOrganisationAccess(ctx context.Context, arg GetUserOrganisationAccessParams) (UserOrganisationsAccess, error) {
	row := q.db.QueryRowContext(ctx, getUserOrganisationAccess, arg.UserID, arg.OrganisationID)
	var i UserOrganisationsAccess
	err := row.Scan(&i.UserID, &i.OrganisationID)
	return i, err
}
