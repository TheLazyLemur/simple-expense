// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: invoice.sql

package db

import (
	"context"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (owner, expense_id, url)
VALUES ($1, $2, $3) 
RETURNING id, owner, expense_id, url, created_at, updated_at
`

type CreateInvoiceParams struct {
	Owner     int64  `json:"owner"`
	ExpenseID int64  `json:"expense_id"`
	Url       string `json:"url"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice, arg.Owner, arg.ExpenseID, arg.Url)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ExpenseID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices
WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, owner, expense_id, url, created_at, updated_at FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id int64) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ExpenseID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInvoice = `-- name: ListInvoice :many
SELECT id, owner, expense_id, url, created_at, updated_at FROM invoices
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInvoiceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoice(ctx context.Context, arg ListInvoiceParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.ExpenseID,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
